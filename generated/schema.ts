// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ZooFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ZooFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ZooFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ZooFactory", id.toString(), this);
  }

  static load(id: string): ZooFactory | null {
    return store.get("ZooFactory", id) as ZooFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairCount(): i32 {
    let value = this.get("pairCount");
    return value.toI32();
  }

  set pairCount(value: i32) {
    this.set("pairCount", Value.fromI32(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class DODOPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DODOPair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DODOPair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DODOPair", id.toString(), this);
  }

  static load(id: string): DODOPair | null {
    return store.get("DODOPair", id) as DODOPair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Trade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Trade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Trade", id.toString(), this);
  }

  static load(id: string): Trade | null {
    return store.get("Trade", id) as Trade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dodoPair(): string | null {
    let value = this.get("dodoPair");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dodoPair(value: string | null) {
    if (value === null) {
      this.unset("dodoPair");
    } else {
      this.set("dodoPair", Value.fromString(value as string));
    }
  }

  get baseBuy(): BigDecimal {
    let value = this.get("baseBuy");
    return value.toBigDecimal();
  }

  set baseBuy(value: BigDecimal) {
    this.set("baseBuy", Value.fromBigDecimal(value));
  }

  get baseSell(): BigDecimal {
    let value = this.get("baseSell");
    return value.toBigDecimal();
  }

  set baseSell(value: BigDecimal) {
    this.set("baseSell", Value.fromBigDecimal(value));
  }

  get quoteBuy(): BigDecimal {
    let value = this.get("quoteBuy");
    return value.toBigDecimal();
  }

  set quoteBuy(value: BigDecimal) {
    this.set("quoteBuy", Value.fromBigDecimal(value));
  }

  get quoteSell(): BigDecimal {
    let value = this.get("quoteSell");
    return value.toBigDecimal();
  }

  set quoteSell(value: BigDecimal) {
    this.set("quoteSell", Value.fromBigDecimal(value));
  }
}
