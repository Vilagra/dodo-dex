type MainStatistic @entity {
    id: ID!
    pairCount: Int!
    # trade stats
    tradeCount: Int!
    # deposit stats
    depositCount: Int!
    # deposit stats
    witdrawCount: Int!
    amountAwailableTokens: Int!

}

type Token @entity {
    # token address
    id: ID!
    # mirrored from the smart contract
    symbol: String!
    name: String!
    decimals: BigInt!
    # used for other stats like marketcap
    totalSupply: BigInt!

    # token specific volume
    tradeVolume: BigDecimal!

    # transactions across all pairs
    txCount: BigInt!

    # deposited across all pairs
    totalDeposited: BigDecimal!

    # deposited across all pairs
    totalWithdrawed: BigDecimal!

    amountInPoolsNow: BigDecimal!

    # derived fields
    pairBase: [DODOPair!]! @derivedFrom(field: "baseToken")
    pairQuote: [DODOPair!]! @derivedFrom(field: "quoteToken")
}

type DODOPair @entity {
    # pair address
    id: ID!

    # mirrored from the smart contract
    "Base token in current pair"
    baseToken: Token!
    "Quote token in current pair"
    quoteToken: Token!
    # clculated values
    "sum of all base token deposits"
    baseDepositedAmount: BigDecimal!
    "sum of all quote token deposits"
    quoteDepositedAmount: BigDecimal!

    currentReseveBase: BigDecimal!
    currentReserveQuote: BigDecimal!

    allTimeBaseTokenTradeVolume: BigDecimal!
    allTimeQuoteTokenTradeVolume: BigDecimal!

    deposits: [Deposit!]! @derivedFrom(field: "dodoPair")
    withdraws: [Withdraw!]! @derivedFrom(field: "dodoPair")
    allTrades: [Trade!] @derivedFrom(field: "dodoPair")
}

type Trade @entity {
    id: ID!

    trader: User!
    dodoPair: DODOPair
    baseBuy: BigDecimal!
    baseSell: BigDecimal!
    quoteBuy: BigDecimal!
    quoteSell: BigDecimal!
}

type Deposit @entity {
    id: ID!

    depositer: User!
    dodoPair: DODOPair
    deposited: Token
    payer: Bytes
    receiver: Bytes
    amount: BigDecimal!
    lpTokenAmount: BigDecimal!
}

type Withdraw @entity {
    id: ID!

    withdrawer: User!
    dodoPair: DODOPair
    withdrawed: Token
    payer: Bytes
    receiver: Bytes
    amount: BigDecimal!
    lpTokenAmount: BigDecimal!
}

type User @entity {
    id: ID!
    deposits: [Deposit!]! @derivedFrom(field: "depositer")
    withdraws: [Withdraw!]! @derivedFrom(field: "withdrawer")
    trades: [Trade!] @derivedFrom(field: "trader")
}
   