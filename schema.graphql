type MainStatistic @entity {
    id: ID!
    "Total pair number"
    pairCount: Int!
    "Total trade number"
    tradeCount: Int!
    "Total deposit number"
    depositCount: Int!
    "Total withdraw number"
    witdrawCount: Int!
    "Amount tokens tradable on DODOExchange"
    amountAwailableTokens: Int!

}

type Token @entity {
    "Token adress"
    id: ID!
    "Token synbol"
    symbol: String!
    "Token name"
    name: String!
    "Token decimal"
    decimals: BigInt!
    "Token total suply"
    totalSupply: BigInt!
    "Sum volume by this token across all pairs"
    tradeVolume: BigDecimal!
    "Sum deposited by this token across all pairs"
    totalDeposited: BigDecimal!
    "Sum withdrawed by this token across all pairs"
    totalWithdrawed: BigDecimal!
    "Total fees added by this token across all pairs"
    totalFeesAdded: BigDecimal!
    "Total amount in pools now by this token across all pairs"
    amountInPoolsNow: BigDecimal!
    "All pairs where current token is Base"
    pairBase: [DODOPair!]! @derivedFrom(field: "baseToken")
    "All pairs where current token is Quote"
    pairQuote: [DODOPair!]! @derivedFrom(field: "quoteToken")
}

type DODOPair @entity {
    id: ID!
    "Base token in current pair"
    baseToken: Token!
    "Quote token in current pair"
    quoteToken: Token!
    "Sum of all base token deposits"
    baseDepositedAmount: BigDecimal!
    "Sum of all quote token deposits"
    quoteDepositedAmount: BigDecimal!
    "Current base token lequidity"
    currentReseveBase: BigDecimal!
    "Current quote token lequidity"
    currentReserveQuote: BigDecimal!
    "Sum all time base token trade volume"
    allTimeBaseTokenTradeVolume: BigDecimal!
    "Sum all time quote token trade volume"
    allTimeQuoteTokenTradeVolume: BigDecimal!
    "Sum fees added to pool by base token"
    feesInBaseToken: BigDecimal!
    "Sum fees added to pool by quote token"
    feesInQuoteToken: BigDecimal!
    "All deposits in this Pair"
    deposits: [Deposit!]! @derivedFrom(field: "dodoPair")
    "All withdraws from this Pair"
    withdraws: [Withdraw!]! @derivedFrom(field: "dodoPair")
    "All trades inside this Pair"
    allTrades: [Trade!] @derivedFrom(field: "dodoPair")
}

type Trade @entity {
    id: ID!
    dodoPair: DODOPair
    trader: User!
    tokenBuy: Token
    amountBuy: BigDecimal!
    tokenSell: Token
    amountSell: BigDecimal!
}

type Deposit @entity {
    id: ID!
    depositer: User!
    dodoPair: DODOPair
    deposited: Token
    amount: BigDecimal!
    lpTokenAmount: BigInt!
}

type Withdraw @entity {
    id: ID!

    withdrawer: User!
    dodoPair: DODOPair
    withdrawed: Token
    amount: BigDecimal!
    lpTokenAmount: BigInt!
}

type User @entity {
    id: ID!
    deposits: [Deposit!]! @derivedFrom(field: "depositer")
    withdraws: [Withdraw!]! @derivedFrom(field: "withdrawer")
    trades: [Trade!] @derivedFrom(field: "trader")
}

type Fee @entity{
    id: ID!

    feeToPair: DODOPair
    token: Token
    amount: BigDecimal!
}
   